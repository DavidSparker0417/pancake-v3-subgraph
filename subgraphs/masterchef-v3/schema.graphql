type MasterChef @entity {
  # Contract address
  id: ID!

  totalAllocPoint: BigInt!
  undistributedCake: BigInt!
  lastHarvestBlock: BigInt!
  latestPeriodStartTime: BigInt!
  latestPeriodEndTime: BigInt!
  latestPeriodCakePerSecond: BigInt!
  latestPeriodCakeAmount: BigInt!
  periodDuration: BigInt!

  pools: [Pool!] @derivedFrom(field: "masterChef")
  poolCount: BigInt!

  timestamp: BigInt!
  block: BigInt!
}

type Pool @entity {
  # Index of pool in poolInfo on MasterChef contract
  id: ID!
  masterChef: MasterChef!
  v3Pool: Bytes!
  # lmPool: Bytes!

  # token0: Token!
  # token1: Token!
  # fee: BigInt!

  allocPoint: BigInt!

  # total user include deposit and withdraw all
  totalUsersCount: BigInt!
  userCount: BigInt!

  timestamp: BigInt!
  block: BigInt!

  userPositions: [UserPosition!]! @derivedFrom(field: "pool")
}

type UserPosition @entity {
  # tokenId
  id: ID!
  pool: Pool!

  # reward: BigInt!
  # rewardGrowthInside: BigInt!
  tickLower: BigInt!
  tickUpper: BigInt!
  liquidity: BigInt!

  timestamp: BigInt!
  block: BigInt!

  user: User!

  earned: BigInt!

  isStaked: Boolean!
}

type User @entity {
  id: ID!

  address: Bytes!

  timestamp: BigInt!
  block: BigInt!
}

# type Token @entity {
  # Token address
#  id: ID!

#  name: String!
#  symbol: String!
#  decimals: BigInt!

#  timestamp: BigInt!
#  block: BigInt!
# }
